/*
 * Copyright (C) 1996-2021 The Squid Software Foundation and contributors
 *
 * Squid software is distributed under GPLv2+ license and includes
 * contributions from numerous individuals and organizations.
 * Please see the COPYING and CONTRIBUTORS files for details.
 */

#ifndef _SQUID__SRC_BASE_XACTION_H
#define _SQUID__SRC_BASE_XACTION_H

#include "anyp/PortCfg.h"
#include "base/InstanceId.h"
#include "base/RefCount.h"
#include "comm/forward.h"
#include "XactionInitiator.h"

namespace Squid {

/** Transaction details.
 *
 * Aggregates historical data from individual related protocol-specific
 * transactions such as an HTTP client transaction and the corresponding
 * HTTP or FTP server transaction.
 *
 * Individual transaction information worth sending or logging should be
 * recorded here, ideally without exposing other transaction users
 * to internal details of individual transactions. For example, storing an
 * HTTP client IP address is a good idea but storing a pointer to some
 * client-side job which maintains that address is not.
 *
 * A Squid transaction is created by a newly accepted client connection,
 * a new request on the existing client connection, or an internal request
 * generated by Squid. All client-side protocols, including HTTP, HTCP, ICP,
 * and SNMP will eventually create master transactions.
 *
 * A transaction is auto-destroyed when its last user is gone.
 */
class Xaction : public RefCountable
{
public:
    explicit Xaction(const XactionInitiator anInitiator) : initiator(anInitiator) {};

    /// transaction ID.
    InstanceId<Squid::Xaction, uint64_t> id;

    /// the listening port which originated this transaction
    AnyP::PortCfgPointer squidPort;

    /// the client TCP connection which originated this transaction
    Comm::ConnectionPointer tcpClient;

    /// the initiator of this transaction
    XactionInitiator initiator;

    /// whether we are currently creating a CONNECT header (to be sent to peer)
    bool generatingConnect = false;

    // TODO: add state from other Jobs in the transaction
};

} // namespace Squid

#endif /* _SQUID__SRC_BASE_XACTION_H */


/*
 * Copyright (C) 1996-2021 The Squid Software Foundation and contributors
 *
 * Squid software is distributed under GPLv2+ license and includes
 * contributions from numerous individuals and organizations.
 * Please see the COPYING and CONTRIBUTORS files for details.
 */

#ifndef SQUID_SRC_MASTERXACTION_H
#define SQUID_SRC_MASTERXACTION_H

#include "anyp/forward.h"
#include "anyp/PortCfg.h"
#include "base/InstanceId.h"
#include "base/Lock.h"
#include "base/RefCount.h"
#include "comm/forward.h"
#include "XactionInitiator.h"

/** Master transaction details.
 *
 * Aggregates historical data from individual related protocol-specific
 * transactions such as an HTTP client transaction and the corresponding
 * HTTP or FTP server transaction.
 *
 * Individual transaction information worth sending or logging should be
 * recorded here, ideally without exposing other master transaction users
 * to internal details of individual transactions. For example, storing an
 * HTTP client IP address is a good idea but storing a pointer to some
 * client-side job which maintains that address is not.
 *
 * A master transaction is created by a newly accepted client connection,
 * a new request on the existing client connection, or an internal request
 * generated by Squid. All client-side protocols, including HTTP, HTCP, ICP,
 * and SNMP will eventually create master transactions.
 *
 * A master transaction is auto-destroyed when its last user is gone.
 */
class MasterXaction : public RefCountable
{
public:
    typedef RefCount<MasterXaction> Pointer;

    explicit MasterXaction(const XactionInitiator anInitiator, const char *name = nullptr) : layerName(name), initiator(anInitiator) {}

    /// Create a new transaction context/sandbox for a nested
    /// sub-protocol which inherits all state information of
    /// the current transaction but leaves the original as read-only.
    Pointer spawnChildLayer(const char *name) const;

public: // Squid internal Metadata - not from any particular protocol.

    /// transaction ID.
    InstanceId<MasterXaction, uint64_t> id;

    /// label to represent this transaction layer when displaying
    /// nested layers of protocol transactions
    const char *layerName = nullptr;

    /// the transport/transfer protocol layer which initiated this transaction (read-only)
    RefCount<MasterXaction> txParent;

    /// A nested transport/transfer protocol layer which has
    /// 'ownership' of our connection until it finishes.
    mutable Pointer txChild;

    /// the listening port which originated this transaction
    AnyP::PortCfgPointer squidPort;

    /// the initiator of this transaction
    XactionInitiator initiator;

public: // TCP protocol state

    /// the client TCP connection which originated this transaction
    Comm::ConnectionPointer tcpClient;

public: // HTTP protocol state

    // FIXME: misplaced Server flag
    /// whether HTTP is currently creating a CONNECT header (to be sent to peer)
    bool generatingConnect = false;
};

#endif /* SQUID_SRC_MASTERXACTION_H */
